{
    "sourceFile": "init-2.ps1",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1718891792858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718891799012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,10 +267,10 @@\n         Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n     }\n }\n \n+# rename user\n \n-\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891804676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n         Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n     }\n }\n \n-# rename user\n+# rename user account\n \n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n"
                },
                {
                    "date": 1718891810143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n         Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n     }\n }\n \n-# rename user account\n+# Stan\n \n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n"
                },
                {
                    "date": 1718891815995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n         Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n     }\n }\n \n-# Stan\n+# Standardize \n \n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n"
                },
                {
                    "date": 1718891822675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,10 +267,12 @@\n         Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n     }\n }\n \n-# Standardize \n+# Standardize user account:\n \n+\n+\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891840885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,11 +268,11 @@\n     }\n }\n \n # Standardize user account:\n+function Deploy-ManageEngine \n \n \n-\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891848503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,11 +268,15 @@\n     }\n }\n \n # Standardize user account:\n-function Deploy-ManageEngine \n+function Deploy-ManageEngine\n+{\n \n+    \n+}\n \n+\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891858814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,12 +268,12 @@\n     }\n }\n \n # Standardize user account:\n-function Deploy-ManageEngine\n+function RenameUser\n {\n \n-    \n+\n }\n \n \n # Execute selected tasks\n"
                },
                {
                    "date": 1718891867264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,12 +268,12 @@\n     }\n }\n \n # Standardize user account:\n-function RenameUser\n+function RenameUserAccount\n {\n+    \n \n-\n }\n \n \n # Execute selected tasks\n"
                },
                {
                    "date": 1718891903927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,13 +270,65 @@\n \n # Standardize user account:\n function RenameUserAccount\n {\n-    \n+    <#\n+    Date: 20-06-24 @1638\n+    Ver 1:\n+      Purpose: Rename current user account to reflect the name of the assigned laptop user.\n+      Not yet tested..\n+#>\n+# Function to list all users and select one\n+function Select-User {\n+    $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n+    for ($i = 0; $i -lt $users.Count; $i++) {\n+        Write-Host \"$($i + 1). $($users[$i])\"\n+    }\n+    $selection = Read-Host \"Select a user by number\"\n+    return $users[$selection - 1]\n+}\n \n+# Get logged in user\n+  $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n+# Select a user\n+$selectedUser = Select-User\n+\n+if ($selectedUser -eq $LoggedInuser)\n+{\n+    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n+} \n+else \n+{\n+    do \n+    {\n+        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+        if (-not $newUsernameValid) \n+        {\n+            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+        }\n+    } while (-not $newUsernameValid)\n+\n+    # Split the username into firstname and secondname\n+      $parts = $newUsername -split '\\.'\n+    # Capitalize the first letter of each part\n+      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n+      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n+    # Format the full name\n+      $fullName = \"$firstName $secondName\"\n+      Write-Host \"The full name will be: $fullName\"\n+    # Rename the user account\n+      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n+    # Update the full name\n+    Set-LocalUser -Name $newUsername -FullName $fullName\n+\n+    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n }\n \n \n+}\n+\n+\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891922777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,55 +275,55 @@\n     Date: 20-06-24 @1638\n     Ver 1:\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n       Not yet tested..\n-#>\n-# Function to list all users and select one\n-function Select-User {\n-    $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n-    for ($i = 0; $i -lt $users.Count; $i++) {\n-        Write-Host \"$($i + 1). $($users[$i])\"\n+    #>\n+    # Function to list all users and select one\n+    function Select-User {\n+        $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n+        for ($i = 0; $i -lt $users.Count; $i++) {\n+            Write-Host \"$($i + 1). $($users[$i])\"\n+        }\n+        $selection = Read-Host \"Select a user by number\"\n+        return $users[$selection - 1]\n     }\n-    $selection = Read-Host \"Select a user by number\"\n-    return $users[$selection - 1]\n-}\n \n-# Get logged in user\n-  $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n-# Select a user\n-$selectedUser = Select-User\n+    # Get logged in user\n+    $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n+    # Select a user\n+    $selectedUser = Select-User\n \n-if ($selectedUser -eq $LoggedInuser)\n-{\n-    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n-} \n-else \n-{\n-    do \n+    if ($selectedUser -eq $LoggedInuser)\n     {\n-        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n-        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-        if (-not $newUsernameValid) \n+        Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n+    } \n+    else \n+    {\n+        do \n         {\n-            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-        }\n-    } while (-not $newUsernameValid)\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+            $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+            if (-not $newUsernameValid) \n+            {\n+                Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+            }\n+        } while (-not $newUsernameValid)\n \n-    # Split the username into firstname and secondname\n-      $parts = $newUsername -split '\\.'\n-    # Capitalize the first letter of each part\n-      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n-      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n-    # Format the full name\n-      $fullName = \"$firstName $secondName\"\n-      Write-Host \"The full name will be: $fullName\"\n-    # Rename the user account\n-      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n-    # Update the full name\n-    Set-LocalUser -Name $newUsername -FullName $fullName\n+        # Split the username into firstname and secondname\n+        $parts = $newUsername -split '\\.'\n+        # Capitalize the first letter of each part\n+        $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n+        $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n+        # Format the full name\n+        $fullName = \"$firstName $secondName\"\n+        Write-Host \"The full name will be: $fullName\"\n+        # Rename the user account\n+        Rename-LocalUser -Name $selectedUser -NewName $newUsername\n+        # Update the full name\n+        Set-LocalUser -Name $newUsername -FullName $fullName\n \n-    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n-}\n+        Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n+    }\n \n \n }\n \n"
                },
                {
                    "date": 1718891984543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,10 +322,8 @@\n         Set-LocalUser -Name $newUsername -FullName $fullName\n \n         Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n     }\n-\n-\n }\n \n \n # Execute selected tasks\n"
                },
                {
                    "date": 1718891989837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,58 +275,60 @@\n     Date: 20-06-24 @1638\n     Ver 1:\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n       Not yet tested..\n-    #>\n-    # Function to list all users and select one\n-    function Select-User {\n-        $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n-        for ($i = 0; $i -lt $users.Count; $i++) {\n-            Write-Host \"$($i + 1). $($users[$i])\"\n-        }\n-        $selection = Read-Host \"Select a user by number\"\n-        return $users[$selection - 1]\n+#>\n+# Function to list all users and select one\n+function Select-User {\n+    $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n+    for ($i = 0; $i -lt $users.Count; $i++) {\n+        Write-Host \"$($i + 1). $($users[$i])\"\n     }\n+    $selection = Read-Host \"Select a user by number\"\n+    return $users[$selection - 1]\n+}\n \n-    # Get logged in user\n-    $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n-    # Select a user\n-    $selectedUser = Select-User\n+# Get logged in user\n+  $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n+# Select a user\n+$selectedUser = Select-User\n \n-    if ($selectedUser -eq $LoggedInuser)\n+if ($selectedUser -eq $LoggedInuser)\n+{\n+    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n+} \n+else \n+{\n+    do \n     {\n-        Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n-    } \n-    else \n-    {\n-        do \n+        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+        if (-not $newUsernameValid) \n         {\n-            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n-            $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-            if (-not $newUsernameValid) \n-            {\n-                Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-            }\n-        } while (-not $newUsernameValid)\n+            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+        }\n+    } while (-not $newUsernameValid)\n \n-        # Split the username into firstname and secondname\n-        $parts = $newUsername -split '\\.'\n-        # Capitalize the first letter of each part\n-        $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n-        $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n-        # Format the full name\n-        $fullName = \"$firstName $secondName\"\n-        Write-Host \"The full name will be: $fullName\"\n-        # Rename the user account\n-        Rename-LocalUser -Name $selectedUser -NewName $newUsername\n-        # Update the full name\n-        Set-LocalUser -Name $newUsername -FullName $fullName\n+    # Split the username into firstname and secondname\n+      $parts = $newUsername -split '\\.'\n+    # Capitalize the first letter of each part\n+      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n+      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n+    # Format the full name\n+      $fullName = \"$firstName $secondName\"\n+      Write-Host \"The full name will be: $fullName\"\n+    # Rename the user account\n+      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n+    # Update the full name\n+    Set-LocalUser -Name $newUsername -FullName $fullName\n \n-        Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n-    }\n+    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n }\n \n \n+}\n+\n+\n # Execute selected tasks\n foreach ($task in $selectedTasks) \n {\n     switch ($task) \n"
                },
                {
                    "date": 1718891995282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,55 +275,55 @@\n     Date: 20-06-24 @1638\n     Ver 1:\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n       Not yet tested..\n-#>\n-# Function to list all users and select one\n-function Select-User {\n-    $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n-    for ($i = 0; $i -lt $users.Count; $i++) {\n-        Write-Host \"$($i + 1). $($users[$i])\"\n+    #>\n+    # Function to list all users and select one\n+    function Select-User {\n+        $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n+        for ($i = 0; $i -lt $users.Count; $i++) {\n+            Write-Host \"$($i + 1). $($users[$i])\"\n+        }\n+        $selection = Read-Host \"Select a user by number\"\n+        return $users[$selection - 1]\n     }\n-    $selection = Read-Host \"Select a user by number\"\n-    return $users[$selection - 1]\n-}\n \n-# Get logged in user\n-  $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n-# Select a user\n-$selectedUser = Select-User\n+    # Get logged in user\n+    $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n+    # Select a user\n+    $selectedUser = Select-User\n \n-if ($selectedUser -eq $LoggedInuser)\n-{\n-    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n-} \n-else \n-{\n-    do \n+    if ($selectedUser -eq $LoggedInuser)\n     {\n-        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n-        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-        if (-not $newUsernameValid) \n+        Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n+    } \n+    else \n+    {\n+        do \n         {\n-            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-        }\n-    } while (-not $newUsernameValid)\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+            $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+            if (-not $newUsernameValid) \n+            {\n+                Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+            }\n+        } while (-not $newUsernameValid)\n \n-    # Split the username into firstname and secondname\n-      $parts = $newUsername -split '\\.'\n-    # Capitalize the first letter of each part\n-      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n-      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n-    # Format the full name\n-      $fullName = \"$firstName $secondName\"\n-      Write-Host \"The full name will be: $fullName\"\n-    # Rename the user account\n-      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n-    # Update the full name\n-    Set-LocalUser -Name $newUsername -FullName $fullName\n+        # Split the username into firstname and secondname\n+        $parts = $newUsername -split '\\.'\n+        # Capitalize the first letter of each part\n+        $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n+        $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n+        # Format the full name\n+        $fullName = \"$firstName $secondName\"\n+        Write-Host \"The full name will be: $fullName\"\n+        # Rename the user account\n+        Rename-LocalUser -Name $selectedUser -NewName $newUsername\n+        # Update the full name\n+        Set-LocalUser -Name $newUsername -FullName $fullName\n \n-    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n-}\n+        Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n+    }\n \n \n }\n \n"
                },
                {
                    "date": 1718892015887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,10 +322,8 @@\n         Set-LocalUser -Name $newUsername -FullName $fullName\n \n         Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n     }\n-\n-\n }\n \n \n # Execute selected tasks\n"
                },
                {
                    "date": 1718892053732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n         2 { CreateITAdminAccount }\n         3 { InstallXCALLY }\n         4 { SetHotName }\n         5 { InstallCloudFlare }\n-        6 { Deploy-ManageEngine } # in progress.\n+        6 { RenameUserAccount} # in progress.\n         \n         default { Write-Host \"Invalid task number: $task\" }\n     }\n }\n"
                },
                {
                    "date": 1718892059950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n         2 { CreateITAdminAccount }\n         3 { InstallXCALLY }\n         4 { SetHotName }\n         5 { InstallCloudFlare }\n-        6 { RenameUserAccount} # in progress.\n+        6 { RenameUserAccount}\n         \n         default { Write-Host \"Invalid task number: $task\" }\n     }\n }\n"
                },
                {
                    "date": 1718892105421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n+\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892114797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-\n+Write-Host \"5. Instsall cloud Flare\"6 { RenameUserAccount}\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892121967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"5. Instsall cloud Flare\"6 { RenameUserAccount}\n+Write-Host \"5. Instsall cloud Flare\"6 { R}\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892129721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"5. Instsall cloud Flare\"6 { R}\n+Write-Host \"5. Instsall cloud Flare\"6 { }\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892138390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"5. Instsall cloud Flare\"6 { }\n+Write-Host \"5. RenameUserAccount\"\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892143950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"5. RenameUserAccount\"\n+Write-Host \"6. RenameUserAccount\"\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892160416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"6. RenameUserAccount\"\n+Write-Host \"6. Standardise RenameUserAccount\"\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892167307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"6. Standardise RenameUserAccount\"\n+Write-Host \"6. Standardise A UserAccount\"\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1718892173539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n Write-Host \"2. IT Admin Account\"\n Write-Host \"3. Install XCALLY\"\n Write-Host \"4. Set Host Name\"\n Write-Host \"5. Instsall cloud Flare\"\n-Write-Host \"6. Standardise A UserAccount\"\n+Write-Host \"6. Standardise A User Account\"\n Write-Host \"x. Exit\"\n \n # Parse the user's input for selected tasks\n $selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n"
                },
                {
                    "date": 1719245004343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n     Purpose: Required Laptop Initialization, app intallations etc\n \n     Other Tasks:\n         - set system restore on if not already set.\n+        - Change the timezone\n         - Put the necessary icons on the taskbar\n #>\n # Loop until the user enters a valid drive letter or 'x' to exit\n # $driveLetter must be global\n"
                },
                {
                    "date": 1719245012086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n \n     Other Tasks:\n         - set system restore on if not already set.\n         - Change the timezone\n+        - Disable\n         - Put the necessary icons on the taskbar\n #>\n # Loop until the user enters a valid drive letter or 'x' to exit\n # $driveLetter must be global\n"
                },
                {
                    "date": 1719245028606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n \n     Other Tasks:\n         - set system restore on if not already set.\n         - Change the timezone\n-        - Disable\n+        - Disable an account\n+        - Delete a user Account\n         - Put the necessary icons on the taskbar\n #>\n # Loop until the user enters a valid drive letter or 'x' to exit\n # $driveLetter must be global\n"
                },
                {
                    "date": 1720783449784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n function CreateITAdminAccount \n {\n     Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n     Write-Host \"-------------- Creating Admin Account..........\"\n-    $AdminName = \"admin\" # change to itadmin when done testing ...\n+    $AdminName = \"itadmin\" # change to itadmin when done testing ...\n     $AdminGroup = \"Administrators\"\n     $RmuGroup = \"Remote Management Users\"\n     # Read the encrypted string from the file\n     # $driveLetter\n"
                },
                {
                    "date": 1720783657486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,9 @@\n         Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n     } \n     elseif($UserExists) \n     {\n+        \n         # Check if the user is a member of the group using net localgroup\n             $IsMember = net localgroup \"$RmuGroup\" | Select-String -Pattern $AdminName\n         if (-not $IsMember) \n         {\n"
                },
                {
                    "date": 1720783663856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n     } \n     elseif($UserExists) \n     {\n-        \n+         Write-Output \"\"\n         # Check if the user is a member of the group using net localgroup\n             $IsMember = net localgroup \"$RmuGroup\" | Select-String -Pattern $AdminName\n         if (-not $IsMember) \n         {\n"
                },
                {
                    "date": 1720783672710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n     } \n     elseif($UserExists) \n     {\n-         Write-Output \"\"\n+         Write-Output \"The admin account Already exists\"\n         # Check if the user is a member of the group using net localgroup\n             $IsMember = net localgroup \"$RmuGroup\" | Select-String -Pattern $AdminName\n         if (-not $IsMember) \n         {\n"
                },
                {
                    "date": 1720783687178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n         if (-not $IsMember) \n         {\n             # User is not a member, add the user to the group\n             Add-LocalGroupMember -Group $RmuGroup -Member $AdminName\n+            \n         }\n         else\n         {\n             Write-Output \"$AdminName is already a member of remote dekstop Management users\"\n"
                },
                {
                    "date": 1720783696814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n         if (-not $IsMember) \n         {\n             # User is not a member, add the user to the group\n             Add-LocalGroupMember -Group $RmuGroup -Member $AdminName\n-            \n+             Write-Output \"\"\n         }\n         else\n         {\n             Write-Output \"$AdminName is already a member of remote dekstop Management users\"\n"
                },
                {
                    "date": 1720783715618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n         if (-not $IsMember) \n         {\n             # User is not a member, add the user to the group\n             Add-LocalGroupMember -Group $RmuGroup -Member $AdminName\n-             Write-Output \"\"\n+             Write-Output \"Added to RmuGroup\"\n         }\n         else\n         {\n             Write-Output \"$AdminName is already a member of remote dekstop Management users\"\n"
                },
                {
                    "date": 1720783721077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n         if (-not $IsMember) \n         {\n             # User is not a member, add the user to the group\n             Add-LocalGroupMember -Group $RmuGroup -Member $AdminName\n-             Write-Output \"Added to RmuGroup\"\n+             Write-Output \"Added to $RmuGroup\"\n         }\n         else\n         {\n             Write-Output \"$AdminName is already a member of remote dekstop Management users\"\n"
                },
                {
                    "date": 1720784507737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n     } \n     elseif($UserExists) \n     {\n-         Write-Output \"The admin account Already exists\"\n+        Write-Output \"The admin account Already exists\"\n         # Check if the user is a member of the group using net localgroup\n             $IsMember = net localgroup \"$RmuGroup\" | Select-String -Pattern $AdminName\n         if (-not $IsMember) \n         {\n"
                },
                {
                    "date": 1720784544604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,10 +211,8 @@\n         Write-Host \"XCALLY installation file not found.\"\n     }\n }\n \n-\n-\n function InstallCloudFlare \n {\n     # 2do: first check if the executable file is present..\n \n"
                },
                {
                    "date": 1720787007563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n     else \n     {\n         do \n         {\n-            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe) User Name must : \"\n             $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n             if (-not $newUsernameValid) \n             {\n                 Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n"
                },
                {
                    "date": 1720787018142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n     else \n     {\n         do \n         {\n-            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe) User Name must : \"\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname same as the(e.g., jane.doe): \"\n             $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n             if (-not $newUsernameValid) \n             {\n                 Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n"
                },
                {
                    "date": 1720787026066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n     else \n     {\n         do \n         {\n-            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname same as the(e.g., jane.doe): \"\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname same as the users email (e.g., jane.doe): \"\n             $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n             if (-not $newUsernameValid) \n             {\n                 Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n"
                }
            ],
            "date": 1718891792858,
            "name": "Commit-0",
            "content": "# Set-ExecutionPolicy -ExecutionPolicy Unrestricted\n# this comment tests git sync features...\n<#\n    Date: 12-11-23 @1238\n    Ver 2:\n        - adds cloud flare installation.\n    Purpose: Required Laptop Initialization, app intallations etc\n\n    Other Tasks:\n        - set system restore on if not already set.\n        - Put the necessary icons on the taskbar\n#>\n# Loop until the user enters a valid drive letter or 'x' to exit\n# $driveLetter must be global\n    $script:driveLetter\n\n##### START COUNT DOWN FUNCTION\nfunction Start-CountDown {\n    param (\n        [string]$message,\n        [int]$start,\n        [int]$end  # Adjust the maximum count as needed\n    )\n\n    for ($count = $start; $count -ge $end; $count--) \n    {\n        Write-Host \"$message...$count\"\n        Start-Sleep -Seconds 1\n    }\n}\n\n#### END: COUNTDOWN Function\\\n## Get the drive letter\ndo {\n    $driveLetter = Read-Host \"Enter the flash drive letter or 'x' to exit:\"\n    if ($driveLetter -eq 'x') \n    {\n        Write-Host \".................. Exiting.. \"\n        \n        break\n    }\n    $driveLetter += \":\"\n    $driveExists = Test-Path -Path $driveLetter -PathType Container\n    if (-not $driveExists) \n    {\n        Write-Host \"Drive '$($driveLetter):\\' not found. Please try again.\"\n    }\n} until ($driveExists)\n\n# If the user chose to exit, stop\nif ($driveLetter -eq 'x') \n{\n    exit\n}\n\n# Display the menu\nWrite-Host \"|||||||||||||||||||| MENU ||||||||||||||||||||||||||||||||||\"\nWrite-Host \"1. Create Windows User Account\"\nWrite-Host \"2. IT Admin Account\"\nWrite-Host \"3. Install XCALLY\"\nWrite-Host \"4. Set Host Name\"\nWrite-Host \"5. Instsall cloud Flare\"\nWrite-Host \"x. Exit\"\n\n# Parse the user's input for selected tasks\n$selectedTasks = Read-Host \"Enter the numbers of the tasks you want to perform (e.g., '1 2 3'):\"\n$selectedTasks = $selectedTasks -split '\\s+' | ForEach-Object { [int]$_ }\n\n# Define functions for the tasks\nfunction CreateUserAccount \n{\n    $UserNames = Read-Host \"Enter the names of the Laptop user (e.g., John Wick):\"\n    $userName = $UserNames -replace ' ', '.' # Replace spaces with dots\n    \n    Write-Host \"-------------- Creating Laptop User account..........\"\n    $sPassword = ConvertTo-SecureString \"123\" -AsPlainText -Force\n\n    # Create the user account\n        New-LocalUser -Name \"$Username\" -Password $sPassword -FullName $UserNames -Description $UserNames -PasswordNeverExpires\n    Add-LocalGroupMember -Group \"Users\" -Member \"$Username\"\n    Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n    Write-Host \"||||||||||||||||||| User account '$userName' created.\"\n}\n\nfunction CreateITAdminAccount \n{\n    Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n    Write-Host \"-------------- Creating Admin Account..........\"\n    $AdminName = \"admin\" # change to itadmin when done testing ...\n    $AdminGroup = \"Administrators\"\n    $RmuGroup = \"Remote Management Users\"\n    # Read the encrypted string from the file\n    # $driveLetter\n    $encryptedString = Get-Content -Path \"$driveLetter\\adm.txt\"\n\n    # Decrypt the string using Base64 decoding\n        $decryptedBytes = [Convert]::FromBase64String($encryptedString)\n        $decryptedString = [System.Text.Encoding]::UTF8.GetString($decryptedBytes)\n    # Output the decrypted string\n        Write-Host \"Decrypted String: $decryptedString\"\n    # Convert the plain string password to a SecureString\n        $securePassword = ConvertTo-SecureString $decryptedString -AsPlainText -Force\n    # Check if the user exists\n        $UserExists = Get-LocalUser -Name $AdminName -ErrorAction SilentlyContinue\n    if (-not $UserExists) \n    {\n        # Create the user account\n            New-LocalUser -Name \"$AdminName\" -Password $securePassword -FullName \"IT Admin\" -Description \"IT Admin Account\" -AccountNeverExpires -PasswordNeverExpires\n        # Add the user to the \"Remote Management Users\" group\n            Add-LocalGroupMember -Group $AdminGroup -Member \"$AdminName\"\n            Add-LocalGroupMember -Group $RmuGroup -Member \"$AdminName\"\n        Write-Output \"||||||||||||||||||| $AdminName ACCOUNT DID NOT EXIST... Created!!\"\n        Write-Host \"`r`n`r`n\"  # Move the cursor down two lines\n    } \n    elseif($UserExists) \n    {\n        # Check if the user is a member of the group using net localgroup\n            $IsMember = net localgroup \"$RmuGroup\" | Select-String -Pattern $AdminName\n        if (-not $IsMember) \n        {\n            # User is not a member, add the user to the group\n            Add-LocalGroupMember -Group $RmuGroup -Member $AdminName\n        }\n        else\n        {\n            Write-Output \"$AdminName is already a member of remote dekstop Management users\"\n        }\n    }\n    \n    Write-Host \"IT Admin account created and configured.\"\n}\n\n# ---- hostname function\nfunction SetHotName\n{\n    # Define the expected hostname pattern\n    $expectedPattern = 'UG-[A-Z0-9]{3,15}-\\d{3}-[A-Za-z]+$'\n# Prompt the user for the hostname\n    $hostname = hostname\n    $sn = Get-WmiObject Win32_Bios | Select-Object -ExpandProperty SerialNumber\n# Check if the entered hostname matches the expected pattern\n    if ($hostname -match $expectedPattern) \n    {\n        Write-Host \"|||||||||||||||||| Hostname Pattern is valid.\"\n\n        # Extract the 3-digit number and names\n            $san = $hostname -split '-'\n            $serialNumber = $san[1]\n            $assetTag = $san[2]\n            $names = $san[3]\n        # Check if the 3-digit number matches the user's laptop\n        $userInput = Read-Host \"Please confirm that the last 3-digits on the Asset Tag are $assetTag & Your Names are: $names !? (y/n)\"\n        if ($userInput -eq \"y\") \n        {\n            Write-Host \"Serial Number: $serialNumber\"\n            Write-Host \"Name: $names\"\n            Write-Host \"Host Name: $hostname\"\n\n            if ($sn -ne $serialNumber)\n            {\n                $serialNumber = $sn\n                $hostname = \"UG-$serialNumber-$newAssetTag-$newName\"\n                rename-computer $hostname -F\n                Write-Host \"The Serial Number Did Not Match... Hostname has been aupdated...Restarting\"\n                Restart-Computer -F\n            }\n        } \n        elseif ($userInput -eq \"n\") \n        {\n            # Prompt the user to enter the correct 3-digit number and name\n                $newAssetTag = Read-Host \"Enter the last 3-digits on the Asset Tag: \"\n                $newName = Read-Host \"Enter your names Of The Laptop Owner e.g JohnWick: \"\n            # Update the hostname\n                $hostname = \"UG-$serialNumber-$newAssetTag-$newName\"\n                Write-Host \"Updated Hostname: $hostname\"\n            # Change hostname\n                rename-computer $hostname -F\n            # Restart the host\n                Restart-Computer -F\n        }\n    } \n    else  # hostname is invalid\n    {\n        Write-Host \"||||||||||  HOSTNAME IS NOT VALID.... let's Change it\"\n        $newAssetTag = Read-Host \"||||||||||  ENTER THE LAST 3 DIGITS ON THE ASSET TAG ATTACHED TO YOUR LAPTOP: \"\n        $newName = Read-Host \"||||||||||  Enter your names Like this JohnWick:\"\n        $hostname = \"UG-$sn-$newAssetTag-$newName\"\n        rename-computer $hostname -F\n        Restart-Computer -F\n    }\n}\n# ---- hostname function\n\nfunction InstallXCALLY \n{\n    $msiPath = \"$($driveLetter):\\xcally.msi\"\n    if (Test-Path -Path $msiPath) \n    {\n        # Install XCALLY using your preferred method (e.g., Start-Process)\n        # Example: Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/i $msiPath /qn\"\n        Write-Host \"XCALLY installed.\"\n    } \n    else \n    {\n        Write-Host \"XCALLY installation file not found.\"\n    }\n}\n\n\n\nfunction InstallCloudFlare \n{\n    # 2do: first check if the executable file is present..\n\n    $msiPath = \"$($driveLetter):\\Cloudflare_WARP_Release-x64.msi\"\n    if (Test-Path -Path $msiPath) \n    {\n        # Install \n        # Start the installation process and wait for it to complete\n        Write-Host \"Installing CloudFlare.. Please wait....\"\n        $process = Start-Process -FilePath \"msiexec.exe\" -ArgumentList \"/i $msiPath /quiet\" -PassThru -Wait\n        # Check the exit code of the installation process\n        if ($exitCode -eq 0 -or $exitCode -eq 3010) \n        {\n            # Write-Host \"Installation completed successfully.\"\n            Start-CountDown -message \"CloudFlare Installation completed successfully\" -start 5 -end 1\n        } \n        else \n        {\n            # Write-Host \"Installation failed. Exit code: $($process.ExitCode)\"\n            Start-CountDown -message \"CloudFlare Installation failed. Exit code: $($process.ExitCode)\" -start 5 -end 1\n        }\n\n    }\n    else \n    {\n        Start-CountDown -message \"The cloudFlare executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n    }\n}\n\nfunction Deploy-ManageEngine \n{\n    # 2do: first check if the executable file is present..\n\n    $msiPath = \"$($driveLetter):\\ManageEngineUG.exe\"\n    if (Test-Path -Path $msiPath) \n    {\n        # Install \n        # Start the installation process and wait for it to complete\n        Write-Host \"Installing Manage Engine.. Please wait....\"\n        $process = Start-Process -FilePath \"ManageEngineUG.exe\" -ArgumentList \"/i $msiPath /quiet\" -PassThru -Wait\n        # Check the exit code of the installation process\n        if ($exitCode -eq 0 -or $exitCode -eq 3010) \n        {\n            # Write-Host \"Installation completed successfully.\"\n            Start-CountDown -message \"Manage Engine UG Installation completed successfully\" -start 5 -end 1\n        } \n        else \n        {\n            # Write-Host \"Installation failed. Exit code: $($process.ExitCode)\"\n            Start-CountDown -message \"ManageEngine UG Installation failed. Exit code: $($process.ExitCode)\" -start 5 -end 1\n        }\n\n    }\n    else \n    {\n        Start-CountDown -message \"The cloudManageEngine UG executatble does not exist on the specified drive.. proceeding in \" -start 5 -end 1\n    }\n}\n\n\n\n# Execute selected tasks\nforeach ($task in $selectedTasks) \n{\n    switch ($task) \n    {\n        1 { CreateUserAccount }\n        2 { CreateITAdminAccount }\n        3 { InstallXCALLY }\n        4 { SetHotName }\n        5 { InstallCloudFlare }\n        6 { Deploy-ManageEngine } # in progress.\n        \n        default { Write-Host \"Invalid task number: $task\" }\n    }\n}\nWrite-Host \"`r`n`r`n\"  # Move the cursor down two lines\nWrite-Host \"All tasks completed.\"\n"
        }
    ]
}