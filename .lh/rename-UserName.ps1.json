{
    "sourceFile": "rename-UserName.ps1",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1718891554679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718891573033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <#\n     Date: 20-06-24 @1638\n     Ver 1:\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n-      \n+      Not yet tested\n #>\n # Function to list all users and select one\n function Select-User {\n     $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n"
                },
                {
                    "date": 1718891604446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <#\n     Date: 20-06-24 @1638\n     Ver 1:\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n-      Not yet tested\n+      Not yet tested..\n #>\n # Function to list all users and select one\n function Select-User {\n     $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n@@ -14,9 +14,9 @@\n     return $users[$selection - 1]\n }\n \n # Get logged in user\n-$LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n+  $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n \n # Select a user\n $selectedUser = Select-User\n \n"
                },
                {
                    "date": 1718891611341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n }\n \n # Get logged in user\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n-\n # Select a user\n $selectedUser = Select-User\n \n if ($selectedUser -eq $LoggedInuser)\n"
                },
                {
                    "date": 1719839962803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n #>\n # Function to list all users and select one\n function Select-User {\n     $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n-    for ($i = 0; $i -lt $users.Count; $i++) {\n+    for ($i = 0; $i -lt $users.Count; $i++) \n+    {\n         Write-Host \"$($i + 1). $($users[$i])\"\n     }\n     $selection = Read-Host \"Select a user by number\"\n     return $users[$selection - 1]\n"
                },
                {
                    "date": 1719839978042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n       Purpose: Rename current user account to reflect the name of the assigned laptop user.\n       Not yet tested..\n #>\n # Function to list all users and select one\n-function Select-User {\n+function Select-User\n+{\n     $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n     for ($i = 0; $i -lt $users.Count; $i++) \n     {\n         Write-Host \"$($i + 1). $($users[$i])\"\n"
                },
                {
                    "date": 1719840020280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n $selectedUser = Select-User\n \n+\n+\n if ($selectedUser -eq $LoggedInuser)\n {\n     Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n } \n"
                },
                {
                    "date": 1719840027329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,12 @@\n # Select a user\n $selectedUser = Select-User\n \n \n+<#\n \n+\n+#>>\n if ($selectedUser -eq $LoggedInuser)\n {\n     Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n } \n"
                },
                {
                    "date": 1719840049427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,8 @@\n $selectedUser = Select-User\n \n \n <#\n-\n-\n-#>>\n if ($selectedUser -eq $LoggedInuser)\n {\n     Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n } \n@@ -56,4 +53,7 @@\n     Set-LocalUser -Name $newUsername -FullName $fullName\n \n     Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n }\n+\n+#>>\n+\n"
                },
                {
                    "date": 1719840103030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,40 +20,49 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n $selectedUser = Select-User\n \n+do \n+      {\n+          $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+          $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+          if (-not $newUsernameValid) \n+          {\n+              Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+          }\n+      } while (-not $newUsernameValid)\n \n <#\n-if ($selectedUser -eq $LoggedInuser)\n-{\n-    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n-} \n-else \n-{\n-    do \n-    {\n-        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n-        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-        if (-not $newUsernameValid) \n-        {\n-            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-        }\n-    } while (-not $newUsernameValid)\n+  if ($selectedUser -eq $LoggedInuser)\n+  {\n+      Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n+  } \n+  else \n+  {\n+      do \n+      {\n+          $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+          $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+          if (-not $newUsernameValid) \n+          {\n+              Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+          }\n+      } while (-not $newUsernameValid)\n \n-    # Split the username into firstname and secondname\n-      $parts = $newUsername -split '\\.'\n-    # Capitalize the first letter of each part\n-      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n-      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n-    # Format the full name\n-      $fullName = \"$firstName $secondName\"\n-      Write-Host \"The full name will be: $fullName\"\n-    # Rename the user account\n-      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n-    # Update the full name\n-    Set-LocalUser -Name $newUsername -FullName $fullName\n+      # Split the username into firstname and secondname\n+        $parts = $newUsername -split '\\.'\n+      # Capitalize the first letter of each part\n+        $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n+        $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n+      # Format the full name\n+        $fullName = \"$firstName $secondName\"\n+        Write-Host \"The full name will be: $fullName\"\n+      # Rename the user account\n+        Rename-LocalUser -Name $selectedUser -NewName $newUsername\n+      # Update the full name\n+      Set-LocalUser -Name $newUsername -FullName $fullName\n \n-    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n-}\n+      Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n+  }\n \n #>>\n \n"
                },
                {
                    "date": 1719840108650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n # Select a user\n $selectedUser = Select-User\n \n do \n-      {\n+{\n           $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n           $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n           if (-not $newUsernameValid) \n           {\n"
                },
                {
                    "date": 1719840115898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n $selectedUser = Select-User\n \n do \n {\n-          $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+                $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n           $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n           if (-not $newUsernameValid) \n           {\n               Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n"
                },
                {
                    "date": 1719840121377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n $selectedUser = Select-User\n \n do \n {\n-                $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n           $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n           if (-not $newUsernameValid) \n           {\n               Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n"
                },
                {
                    "date": 1719840416041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n           if (-not $newUsernameValid) \n           {\n               Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n           }\n-      } while (-not $newUsernameValid)\n+} while (-not $newUsernameValid)\n \n <#\n   if ($selectedUser -eq $LoggedInuser)\n   {\n"
                },
                {
                    "date": 1719840429216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n $selectedUser = Select-User\n \n do \n {\n-            $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n-          $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+  $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n+  $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n           if (-not $newUsernameValid) \n           {\n               Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n           }\n"
                },
                {
                    "date": 1719840436094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n   $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-          if (-not $newUsernameValid) \n-          {\n+  if (-not $newUsernameValid) \n+  {\n               Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n           }\n } while (-not $newUsernameValid)\n \n"
                },
                {
                    "date": 1719840702571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,17 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n $selectedUser = Select-User\n \n+\n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n   $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n   if (-not $newUsernameValid) \n   {\n-              Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-          }\n+    Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+  }\n } while (-not $newUsernameValid)\n \n <#\n   if ($selectedUser -eq $LoggedInuser)\n"
                },
                {
                    "date": 1719840708880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n \n # Get logged in user\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n-$selectedUser = Select-User\n+  $selectedUser = Select-User\n+#\n \n-\n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n   $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n"
                },
                {
                    "date": 1719840717574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n # Get logged in user\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n-#\n+# Check if the \n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719840967780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n # Get logged in user\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n-# Check if the \n+# Check if the userName is in the right format\n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841061473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n # Get logged in user\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n-# Check if the userName is in the right format\n+# Check if the userName is in the right format:\n+  $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841069717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n-  $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n+  $newUsernameValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841080777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n-  $newUsernameValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n+  $selectedUser = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841095703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n   $LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n-  $selectedUser = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n+  $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n+  \n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841104060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,18 +21,15 @@\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n-  \n \n+\n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n   $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n-  if (-not $newUsernameValid) \n-  {\n-    Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-  }\n+  \n } while (-not $newUsernameValid)\n \n <#\n   if ($selectedUser -eq $LoggedInuser)\n"
                },
                {
                    "date": 1719841109509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,13 @@\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n+  if (-not $newUsernameValid) \n+  {\n+    Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+  }\n \n-\n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n   $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n"
                },
                {
                    "date": 1719841116419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n-  if (-not $newUsernameValid) \n+  if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n \n"
                },
                {
                    "date": 1719841134810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n+  \n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841141887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n # Select a user\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n-  \n+  do\n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841147322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,11 @@\n   $selectedUser = Select-User\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n+  {\n+    \n+  }\n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841169200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n   {\n-    \n-  }\n+\n+  }while (-not $newUsernameValid)\n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841174744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n   {\n \n-  }while (-not $newUsernameValid)\n+  }while (-not $selectedUserValid)\n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841213942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,11 @@\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n   {\n+    \n+  }while (-not $selectedUserValid)\n \n-  }while (-not $selectedUserValid)\n   if (-not $selectedUserValid) \n   {\n     Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n   }\n"
                },
                {
                    "date": 1719841238604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,15 +23,12 @@\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n   {\n-    \n+\n   }while (-not $selectedUserValid)\n \n-  if (-not $selectedUserValid) \n-  {\n-    Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n-  }\n+  \n \n do \n {\n   $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n"
                },
                {
                    "date": 1719841245590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,12 @@\n # Check if the userName is in the right format:\n   $selectedUserValid = $selectedUser -match '^[a-z]+\\.[a-z]+$'\n   do\n   {\n-\n+    if (-not $selectedUserValid) \n+    {\n+      Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n+    }\n   }while (-not $selectedUserValid)\n \n   \n \n"
                },
                {
                    "date": 1719841251225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if (-not $selectedUserValid) \n     {\n       Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n     }\n-  }while (-not $selectedUserValid)\n+  } while (-not $selectedUserValid)\n \n   \n \n do \n"
                }
            ],
            "date": 1718891554679,
            "name": "Commit-0",
            "content": "<#\n    Date: 20-06-24 @1638\n    Ver 1:\n      Purpose: Rename current user account to reflect the name of the assigned laptop user.\n      \n#>\n# Function to list all users and select one\nfunction Select-User {\n    $users = Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" | Select-Object -ExpandProperty Name\n    for ($i = 0; $i -lt $users.Count; $i++) {\n        Write-Host \"$($i + 1). $($users[$i])\"\n    }\n    $selection = Read-Host \"Select a user by number\"\n    return $users[$selection - 1]\n}\n\n# Get logged in user\n$LoggedInuser = (Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName).Split('\\')[1]\n\n# Select a user\n$selectedUser = Select-User\n\nif ($selectedUser -eq $LoggedInuser)\n{\n    Write-Host \"The selected user ($selectedUser) is the same as the logged in user. This user account Meets the Standards required!\"\n} \nelse \n{\n    do \n    {\n        $newUsername = Read-Host \"Enter a new username in the format firstname.secondname (e.g., jane.doe): \"\n        $newUsernameValid = $newUsername -match '^[a-z]+\\.[a-z]+$'\n        if (-not $newUsernameValid) \n        {\n            Write-Host \"Invalid username. Please enter a valid username in the format firstname.secondname (e.g., jane.doe).\"\n        }\n    } while (-not $newUsernameValid)\n\n    # Split the username into firstname and secondname\n      $parts = $newUsername -split '\\.'\n    # Capitalize the first letter of each part\n      $firstName = $parts[0].Substring(0,1).ToUpper() + $parts[0].Substring(1).ToLower()\n      $secondName = $parts[1].Substring(0,1).ToUpper() + $parts[1].Substring(1).ToLower()\n    # Format the full name\n      $fullName = \"$firstName $secondName\"\n      Write-Host \"The full name will be: $fullName\"\n    # Rename the user account\n      Rename-LocalUser -Name $selectedUser -NewName $newUsername\n    # Update the full name\n    Set-LocalUser -Name $newUsername -FullName $fullName\n\n    Write-Host \"User $selectedUser has been renamed to $newUsername and the full name updated to $fullName.\"\n}\n"
        }
    ]
}